# Define how the table should be built and behave
# TODO (much later): GUI for creating/editing this

name: Client Activity Report
header:
  title: Client Activity Report
  description: Choose the items that you wish to appear on the report.
  tools:
    # Highlights matching values inline, on the scroll bar, and has a
    - Search
    # Displays only items from the data that match. Same syntax as search, but no highlighting
    - Filter
    # Select display order for any ordinal columns by the value (not format)
    - Sort
    # Default behaviours of the components. This should be an aggregate of all the tools
    # being used (eg Selector, filter)
    - Config
  # An optional render override
  render: fn(HeaderConfig) -> Html
body:
  # Rendering options
  options:
    # Whether the headers should always be shown
    headers: PinnedTop

    # How many parent rows should be frozen at the top before scrolling off?
    nested_freeze: 3
  row:
    name: &OrganizationRow
      # How to identify the source data of the row using a function.
      # A function to create a unique key based on the node


    key: "{{node}}.get_guid()"

    # An ordered list of items
    columns:
      # A group is a set of columns that map 1 to 1, meaning they share the same key and children
      # A default behaviour is that clicking on any of the members will toggle the child view
      # This can be autogenerated from the columns, but it seems easier to get it here
      groups:
        - name: &OrganizationGroup
          key: "{row}.get_guid()"
          children:
            # This query should return a list of nodes to be passed to render
            values: "(node)->[childOf]->(:__Organization)"
            # Reuse the same row formatting. Depth will be passed as a variable for table
            render: { table: { body: { row: { base: *OrganizationRow } } } }
        # Items that have been requested/started but technically not eligible for delivery
        - name: OpenGroup
        # Items that have been completed and delivered
        - name: FinalizedGroup
        # Money received from customers
        - name: PaymentGroup
        # Outstanding invoices (accounts receivable)
        - name: InvoiceGroup

      columns:
        # The selector is a checkbox that chooses one or more items
        # The items selected are leaves on the tree, not the row
        # All strings can be templates
        - name: OrgSelector
          # Help that is displayed when hovering over.
          # THINK: Is this context sensitive based on the row it's attached to?
          help:
          value:
            Selector:
              - toggle: "selected.toggle({{key}})"
          group: *OrganizationGroup

        - name: OrganizationName
          display: Organization Name
          # Format is implied here. Or should this return HTML?
          value: sum(row.open + row.closed + row.finalized + row.paid)
          # THINK: How does this loopback work in YAML, since it should be the same?
          group: *OrganizationGroup

        - name: Balance
          header: "Balance (count)"
          value:
            Aggregate:
              # How to do selected only? Run the query against
              # This should be a raw GQuery and let grapht do the work
              value: Sum((node)->[childOf*0..1]->(node))
          format: fn(value) -> HTML
          group: *OrganizationGroup

        - # If columns is included, it makes the columns a subgroup
          name: Open Submissions
          columns:
            - name: Value
              base: Balance
              value:
            - name: Amount ($)
footer:
